<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BOF on Yusuf Hegazy</title>
    <link>https://hegz.me/tags/bof/</link>
    <description>Recent content in BOF on Yusuf Hegazy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Jan 2021 19:07:42 +0200</lastBuildDate><atom:link href="https://hegz.me/tags/bof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leaky Pipe</title>
      <link>https://hegz.me/writeups/leaky_pipe/</link>
      <pubDate>Sun, 17 Jan 2021 19:07:42 +0200</pubDate>
      
      <guid>https://hegz.me/writeups/leaky_pipe/</guid>
      <description>In this challenge we recieved a binary in which we are asked to exploit and somehow retrieve the flag.
Initial Analysis We start by running the binary and checking it behavior.
./leaky_pipe We have just fixed the plumbing systm, let&#39;s hope there&#39;s no leaks! &amp;gt;.&amp;gt; aaaaah shiiit wtf is dat address doin here... 0x7ffde7760410 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA &amp;lt;--- our input Segmentation fault (core dumped) And as we see, we can already get a segfault by spamming some A&amp;rsquo;s in the input.</description>
    </item>
    
    <item>
      <title>Trigger Happy (0xL4ugh CTF)</title>
      <link>https://hegz.me/writeups/trigger_happy/</link>
      <pubDate>Sat, 16 Jan 2021 16:33:49 +0200</pubDate>
      
      <guid>https://hegz.me/writeups/trigger_happy/</guid>
      <description>Some background This is a challenge from 0xl4ugh CTF which was inspired by RACTF&amp;rsquo;s not really ai challenge, It was the first ever pwn challenge I solve in a CTF alone and I really liked it hence I wanted to bring it to this CTF (you can even check my poorly written writeup for that challenge which I refuse to remove as It&amp;rsquo;s pretty awesome to look back and see how much did we grow).</description>
    </item>
    
    <item>
      <title>Buffer Overflows for Newbies</title>
      <link>https://hegz.me/posts/bof-for-normies/</link>
      <pubDate>Mon, 30 Nov 2020 02:46:12 +0200</pubDate>
      
      <guid>https://hegz.me/posts/bof-for-normies/</guid>
      <description>What is a Buffer anyway? We can think of buffers as containers to hold our data for later use, it&amp;rsquo;s not really something specific to computer science; In fact, we have buffers in electronics, mechanics, chemistry and even politics! We can say that the word buffer is just a fancy name for a placeholder (temporary storage)!
Buffer in Computer Science Now, it&amp;rsquo;s time to get more technical and get to know buffers more in computer science!</description>
    </item>
    
    <item>
      <title>GDB Cheatsheet</title>
      <link>https://hegz.me/posts/gdb-cheatsheet/</link>
      <pubDate>Tue, 18 Aug 2020 13:56:57 +0000</pubDate>
      
      <guid>https://hegz.me/posts/gdb-cheatsheet/</guid>
      <description>Data:
 disas main to disassemble function x/50wx $esp examine 50 words in hex starting from esp x/50i $eip examine 50 instructions from eip x anything examine address and show itâ€™s contents info variables varname will show any variable address (for global!) info functions to list all functions info frame shows the saved RTN address under &amp;ldquo;saved eip&amp;rdquo; info proc map shows memory map ctx shows general info about everything (works in gef only)    Flow</description>
    </item>
    
  </channel>
</rss>
