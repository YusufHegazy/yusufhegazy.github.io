<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yusuf Hegazy</title>
    <link>https://yusufhegazy.github.io/</link>
    <description>Recent content on Yusuf Hegazy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Sep 2020 15:52:30 +0200</lastBuildDate>
    
	<atom:link href="https://yusufhegazy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Optimizing Recursion</title>
      <link>https://yusufhegazy.github.io/posts/lets-talk-recursion/</link>
      <pubDate>Thu, 24 Sep 2020 15:52:30 +0200</pubDate>
      
      <guid>https://yusufhegazy.github.io/posts/lets-talk-recursion/</guid>
      <description>Recursion is a pretty improtant topic in programming and it&amp;rsquo;s not that hard to grasp or even implement, but how about actually using it correctly?
In this blog post i will try to explain the basic concept of recursion and then show why recursion can be so inefficient and how to optimize it using Call Tail Optimization!
Normal Recursion, A Factorial Example Most of us tech nerds have already dealt with the good &amp;lsquo;ol recursion, let&amp;rsquo;s refresh our understanding using the iconic factorial program.</description>
    </item>
    
    <item>
      <title>GDB Cheatsheet</title>
      <link>https://yusufhegazy.github.io/posts/gdb-cheatsheet/</link>
      <pubDate>Tue, 18 Aug 2020 13:56:57 +0000</pubDate>
      
      <guid>https://yusufhegazy.github.io/posts/gdb-cheatsheet/</guid>
      <description>Data:
 disas main to disassemble function x/50wx $esp examine 50 words in hex starting from esp x/50i $eip examine 50 instructions from eip x anything examine address and show itâ€™s contents info variables varname will show any variable address (for global!) info functions to list all functions info frame shows the saved RTN address under &amp;ldquo;saved eip&amp;rdquo; info proc map shows memory map ctx shows general info about everything (works in gef only)    Flow</description>
    </item>
    
    <item>
      <title>Not Really AI (Pwn - 200 Points)</title>
      <link>https://yusufhegazy.github.io/posts/ctf-writeup/</link>
      <pubDate>Tue, 09 Jun 2020 17:49:21 +0000</pubDate>
      
      <guid>https://yusufhegazy.github.io/posts/ctf-writeup/</guid>
      <description>Little Background This is a Binary exploitaion challenge, based around a format string vulnerability.
 Misusage of the libc printf() function can lead to serious information leakage and even code execution. when we pass one argument (for example printf(foo)) we can:  leak stack addresses using %x or %p format specifiers. overwrite any pointer&amp;rsquo;s value using %n specifier (note that we can&amp;rsquo;t overwrite plain stack addresses as the %n format specifier can only overwrite by reference and not by value)    For more information on format strings please check this awesome resource</description>
    </item>
    
  </channel>
</rss>