<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yusuf Hegazy</title>
    <link>https://hegz.me/</link>
    <description>Recent content on Yusuf Hegazy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Apr 2021 03:06:15 +0200</lastBuildDate>
    
	<atom:link href="https://hegz.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Favorite Binary Exploitation Resources</title>
      <link>https://hegz.me/posts/bof-resources/</link>
      <pubDate>Tue, 27 Apr 2021 03:06:15 +0200</pubDate>
      
      <guid>https://hegz.me/posts/bof-resources/</guid>
      <description>These are by far the best resources I have found and have actually tried since I started learning binary exploitation.
Don&amp;rsquo;t waste your time choosing which is the best resource, just pick one and start digging in. They are all awesome!
Video  Hegzploit - Arabic Nakerah Network&amp;rsquo;s BOF Playlist - Arabic (Windows) LiveOverflow GynvaelEN Search for topics on ippsec.rocks The Cyber Mentor&amp;rsquo;s Playlist (Windows) PinkDraconian&amp;rsquo;s Playlist John Hammond&amp;rsquo;s Playlist  Full Fledged Courses  Pwn College Georgia Institute of Technology Course Guyintuxedo - Nightmare  Practice Material  Exploit Exercises picoCTF pwnable.</description>
    </item>
    
    <item>
      <title>Leaky Pipe (0xL4ugh CTF)</title>
      <link>https://hegz.me/writeups/leaky_pipe/</link>
      <pubDate>Sun, 17 Jan 2021 19:07:42 +0200</pubDate>
      
      <guid>https://hegz.me/writeups/leaky_pipe/</guid>
      <description>In this challenge we recieved a binary in which we are asked to exploit and somehow retrieve the flag.
you can find the binary for this challenge here
Initial Analysis We start by running the binary and checking it behavior.
./leaky_pipeWe have just fixed the plumbing systm, let&#39;s hope there&#39;s no leaks!&amp;gt;.&amp;gt; aaaaah shiiit wtf is dat address doin here... 0x7ffde7760410AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA &amp;lt;--- our inputSegmentation fault (core dumped)And as we see, we can already get a segfault by spamming some A&amp;rsquo;s in the input.</description>
    </item>
    
    <item>
      <title>Trigger Happy (0xL4ugh CTF)</title>
      <link>https://hegz.me/writeups/trigger_happy/</link>
      <pubDate>Sat, 16 Jan 2021 16:33:49 +0200</pubDate>
      
      <guid>https://hegz.me/writeups/trigger_happy/</guid>
      <description>Some background This is a challenge from 0xl4ugh CTF which was inspired by RACTF&amp;rsquo;s not really ai challenge, It was the first ever pwn challenge I solve in a CTF alone and I really liked it hence I wanted to bring it to this CTF (you can even check my poorly written writeup for that challenge which I refuse to remove as It&amp;rsquo;s pretty awesome to look back and see how much did we grow).</description>
    </item>
    
    <item>
      <title>Buffer Overflows for Newbies</title>
      <link>https://hegz.me/posts/bof-for-normies/</link>
      <pubDate>Mon, 30 Nov 2020 02:46:12 +0200</pubDate>
      
      <guid>https://hegz.me/posts/bof-for-normies/</guid>
      <description>What is a Buffer anyway? We can think of buffers as containers to hold our data for later use, it&amp;rsquo;s not really something specific to computer science; In fact, we have buffers in electronics, mechanics, chemistry and even politics! We can say that the word buffer is just a fancy name for a placeholder (temporary storage)!
Buffer in Computer Science Now, it&amp;rsquo;s time to get more technical and get to know buffers more in computer science!</description>
    </item>
    
    <item>
      <title>My Favorite Linux Distro</title>
      <link>https://hegz.me/posts/distro/</link>
      <pubDate>Sun, 27 Sep 2020 23:27:38 +0200</pubDate>
      
      <guid>https://hegz.me/posts/distro/</guid>
      <description>To Linux or not to Linux Since a couple months ago, i have decided to try and switch fully to linux and ditch that piece of junk they call windows.
Now, that&amp;rsquo;s a bit misleading since i have been using windows for the past 12-13 years of my keyboard smashing journey but i don&amp;rsquo;t really feel any guilt doing this, in fact windows is nothing more of a bottleneck to me or so have i figured later.</description>
    </item>
    
    <item>
      <title>Optimizing Recursion</title>
      <link>https://hegz.me/posts/lets-talk-recursion/</link>
      <pubDate>Thu, 24 Sep 2020 15:52:30 +0200</pubDate>
      
      <guid>https://hegz.me/posts/lets-talk-recursion/</guid>
      <description>Recursion is a pretty improtant topic in programming and it&amp;rsquo;s not that hard to grasp or even implement, but how about actually using it correctly?
In this blog post i will try to explain the basic concept of recursion and then show why recursion can be so inefficient and how to optimize it using Call Tail Optimization!
Normal Recursion, A Factorial Example Most of us tech nerds have already dealt with the good &amp;lsquo;ol recursion, let&amp;rsquo;s refresh our understanding using the iconic factorial program.</description>
    </item>
    
    <item>
      <title>GDB Cheatsheet</title>
      <link>https://hegz.me/posts/gdb-cheatsheet/</link>
      <pubDate>Tue, 18 Aug 2020 13:56:57 +0000</pubDate>
      
      <guid>https://hegz.me/posts/gdb-cheatsheet/</guid>
      <description>Data:
 disas main to disassemble function x/50wx $esp examine 50 words in hex starting from esp x/50i $eip examine 50 instructions from eip x anything examine address and show itâ€™s contents info variables varname will show any variable address (for global!) info functions to list all functions info frame shows the saved RTN address under &amp;ldquo;saved eip&amp;rdquo; info proc map shows memory map ctx shows general info about everything (works in gef only)    Flow</description>
    </item>
    
    <item>
      <title>Not Really AI (RA CTF)</title>
      <link>https://hegz.me/writeups/notreallyai/</link>
      <pubDate>Tue, 09 Jun 2020 17:49:21 +0000</pubDate>
      
      <guid>https://hegz.me/writeups/notreallyai/</guid>
      <description>Little Background This is a Binary exploitaion challenge, based around a format string vulnerability.
 Misusage of the libc printf() function can lead to serious information leakage and even code execution. when we pass one argument (for example printf(foo)) we can:  leak stack addresses using %x or %p format specifiers. overwrite any pointer&amp;rsquo;s value using %n specifier (note that we can&amp;rsquo;t overwrite plain stack addresses as the %n format specifier can only overwrite by reference and not by value)    For more information on format strings please check this awesome resource</description>
    </item>
    
  </channel>
</rss>